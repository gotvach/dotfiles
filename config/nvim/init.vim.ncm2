" vim:set et sw=4 ts=4 tw=78 ft=vim:
" set runtimepath^=~/.neovim runtimepath+=~/.neovim/after
let &packpath = &runtimepath

"""""""""""
" General "
"""""""""""
let localleader= ','
let mapleader = ','
let maplocalleader = ','
set autoread
set background=dark
set foldmethod=marker
set updatetime=100
set laststatus=2
set number relativenumber
set omnifunc=syntaxcomplete#Complete
set pastetoggle=<F3>
set t_Co=256
set tabstop=4 shiftwidth=4 expandtab
set completeopt=noinsert,menuone,noselect,preview
set complete+=k
set spell spellfile="~/.spellfile" spelllang=en_gb

"""""""""""
" Plugins "
"""""""""""

call plug#begin('~/.local/share/nvim/plugged')
if has('nvim')
    " Completion
"   Plug 'python-mode/python-mode', { 'branch': 'develop' }
    Plug 'othree/jspc.vim', { 'for': ['javascript', 'javascript.jsx'] }
    Plug 'Shougo/neco-vim'          " VIM command completion
    Plug 'autozimu/LanguageClient-neovim', {
        \ 'branch': 'next',
        \ 'do': 'bash install.sh',
        \ }

    Plug 'neomake/neomake'
    Plug 'Shougo/neco-syntax'
    Plug 'fgrsnau/ncm2-otherbuf', { 'branch': 'master' }

    " Display
    Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' }
endif

"""""""""""""""""
"  NCM2 config  "
"""""""""""""""""
Plug 'ncm2/ncm2'
Plug 'roxma/nvim-yarp'
Plug 'ncm2/ncm2-go'
Plug 'ncm2/ncm2-bufword'
Plug 'ncm2/ncm2-jedi'
Plug 'ncm2/ncm2-path'
Plug 'ncm2/ncm2-syntax'
Plug 'ncm2/ncm2-vim'
Plug 'ncm2/ncm2-ultisnips'

Plug 'airblade/vim-gitgutter'
Plug 'brooth/far.vim'
Plug 'bronson/vim-trailing-whitespace'
Plug 'fatih/vim-go'
Plug 'flazz/vim-colorschemes'
Plug 'godlygeek/tabular'
Plug 'honza/vim-snippets'
Plug 'itchyny/lightline.vim'
Plug 'joshdick/onedark.vim'
Plug 'juliosueiras/vim-terraform-completion'
Plug 'junegunn/fzf'
Plug 'junegunn/fzf.vim'
Plug 'lervag/vimtex'
Plug 'mhinz/neovim-remote'
Plug 'ncm2/ncm2-ultisnips'
Plug 'pearofducks/ansible-vim'
Plug 'rizzatti/dash.vim'
Plug 'scrooloose/syntastic'
Plug 'sheerun/vim-polyglot'
Plug 'SirVer/ultisnips'
Plug 'terryma/vim-multiple-cursors'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-surround'

call plug#end()

""""""""""""""""""
"  Colorschemes  "
""""""""""""""""""
" colorscheme antares
" colorscheme CandyPaper
" colorscheme DevC++
" colorscheme Light
" colorscheme LightDefault
" colorscheme monokai
colorscheme onedark
" colorscheme PaperColor
" colorscheme revolution
" colorscheme Tomorrow-Night
" colorscheme Tomorrow-Night-Eighties
" colorscheme wombat256i
" colorscheme zen
" colorscheme zenburn
" colorscheme znake
" colorscheme molokai


"""""""""""""
" Variables "
"""""""""""""
" See output of :checkhealth
let g:pymode_python = 'python3'
if has('mac')
    let g:python_host_prog  = expand('~/.pyenv/versions/py2neovim/bin/python')
    let g:python3_host_prog = expand('~/.pyenv/versions/py3neovim/bin/python')
elseif has('linux')
    let g:python_host_prog  = expand('~/.virtualenvs/py2neovim/bin/python')
    let g:python3_host_prog = expand('~/.virtualenvs/py3neovim/bin/python')
endif

" has('linux') not currently working? 15/1/20
let g:python_host_prog  = expand('/usr/bin/python2')
let g:python3_host_prog = expand('~/.linuxbrew/bin/python3')


if has('mac')
    let g:LanguageClient_loggingFile=expand("~/language-client.log")
    let g:LanguageClient_loggingLevel="DEBUG"
    let g:LanguageClient_serverCommands = {
        \ 'dockerfile': ['docker-langserver', '--stdio'],
        \ 'python': [expand('~/.pyenv/versions/pyls')],
        \ 'go': [expand('~/Projects/go/bin/go-langserver'), '-gocodecompletion'],
        \ }
else
    let g:LanguageClient_loggingFile=expand("~/tmp/language-client.log")
    let g:LanguageClient_loggingLevel="DEBUG"
    let g:LanguageClient_serverCommands = {
        \ 'dockerfile': ['docker-langserver', '--stdio'],
        \ 'python': [expand('~/.virtualenvs/pyls/bin/pyls')],
        \ 'go': [expand('~/git/go/bin/go-langserver'), '-gocodecompletion'],
        \ }
endif
let g:lightline = {
    \   'colorscheme': 'deus',
    \   'active': {
    \       'left': [ [ 'mode', 'paste' ],
    \                 [ 'fugitive', 'readonly', 'filename', 'modified' ] ]
    \   },
    \   'component_function': {
    \       'fugitive': 'fugitive#head'
    \   }
    \ }
let g:ncm2#popup_delay = 100
if !exists('g:necovim#complete_functions')
    let g:necovim#complete_functions = {}
endif
let g:necovim#complete_functions.Ref = 'ref#complete'

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_mode_map={'mode': 'active', 'passive_filetypes': ['haskell']}
let g:syntastic_puppet_puppet_args = '--parser=future'
let g:syntastic_yaml_checkers = ['yamllint']

let g:UltiSnipsListSnippets = "<C-l>"
let g:UltiSnipsEditSplit = "vertical"
let g:UltiSnipsRemoveSelectModeMappings = 0
" let g:UltiSnipsExpandTrigger = "<Plug>(ultisnips_expand_or_jump)"
let g:UltiSnipsExpandTrigger = "<C-e>"
let g:tex_flavor = 'latex'

let g:vimtex_compiler_method = 'xelatex'
let g:vimtex_compiler_progname = 'nvr'

""""""""""""""""""
"  Highlighting  "
""""""""""""""""""

augroup WhiteSpaceGroup
    au!
    highlight ExtraWhitespace ctermbg=darkgreen guibg=darkgreen
    autocmd BufEnter,InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
    autocmd InsertLeave * match ExtraWhitespace /\s\+$/
augroup end

""""""""""
" Groups "
""""""""""

" Autocomplete
augroup AutocompleteGroup
    au!
    autocmd CompleteDone * if pumvisible() == 0 | pclose | endif
    autocmd BufEnter * call ncm2#enable_for_buffer()
    autocmd TextChangedP * call ncm2#auto_trigger()
augroup end

" Language
augroup ConsulTemplate
    au!
    autocmd BufReadPost *.ctmpl setlocal ft=consul-template
    autocmd BufWritePost *.ctmpl silent make
    autocmd QuickFixCmdPost [^l]* nested cwindow
    autocmd QuickFixCmdPost    l* nested lwindow
augroup end

augroup Golang
    au!
    autocmd BufWritePost *.go GoImports
    autocmd BufWritePost *.go GoBuild
augroup end

augroup Graphviz
    au!
    autocmd FileType dot setlocal makeprg=dmake\ svg
    autocmd BufWritePost *.dot silent make
augroup end

augroup Jenkinsfile
    au!
    autocmd FileType Jenkinsfile set sw=2 ts=2
augroup end

augroup LanguageGroup
    au!
    autocmd FileType consul-template :call <SID>ConsulTemplate()
    autocmd FileType go :call GoMaps()
    autocmd FileType * :call LC_maps()

    autocmd FileType gitcommit set tw=70
    autocmd FileType java setlocal omnifunc=javacomplete#Complete
    autocmd FileType json set et ts=2 sw=2 omnifunc=jsoncomplete#Complete
    autocmd FileType ruby :call <SID>RubyConfig()
    autocmd FileType terraform :call <SID>terraformSetup()
    autocmd FileType yaml set et ts=2 sw=2
    autocmd FileType provisioners.json set ft=packer.json
    autocmd BufNewFile,BufRead provisioners.json set ft=packer.json
augroup end

augroup ncm2
    " this one is which you're most likely to use?
    au!
    autocmd Filetype latex,tex call ncm2#register_source({
                \ 'name': 'vimtex',
                \ 'priority': 8,
                \ 'scope': ['tex'],
                \ 'mark': 'tex',
                \ 'word_pattern': '\w+',
                \ 'complete_pattern': g:vimtex#re#ncm2,
                \ 'on_complete': ['ncm2#on_complete#omni', 'vimtex#complete#omnifunc'],
                \ })
augroup end

augroup Snippets
    au!
    autocmd FileType json :call UltiSnips#AddFiletypes('packer')
augroup end

augroup Vim
    au!
    autocmd BufWritePost init.vim* source %
    autocmd BufWrite .vimrc source %
augroup end

augroup YAML
    au!
    autocmd BufReadPost *.eyaml setlocal ft=yaml | call <SID>yamlSetup()
    autocmd FileType yaml :call <SID>yamlSetup()
    if executable('yamllint')
        let g:neomake_yaml_yamllint_maker = {
                    \ 'args': ['-f', 'parsable'],
                    \ 'errorformat': '%E%f:%l:%c: [error] %m,%W%f:%l:%c: [warning] %m' }
        let g:neomake_yaml_enabled_makers = ['yamllint']
    endif
augroup end

"""""""""""
" Keymaps "
"""""""""""

" Use jk to escape from insert to normal mode
inoremap jk <esc>

" Quickly close other/this split(s)
nnoremap <leader>o <C-w>o
nnoremap <leader>c <C-w>c

" use <TAB> to select the popup menu:
inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"

" inoremap <silent> <expr> <CR> ncm2_ultisnips#expand_or("\<Plug>(ultisnips_try_expand)")
" inoremap <silent> <expr> <Tab> ncm2_ultisnips#expand_or("\<CR>", 'n')
" inoremap <expr> <CR> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
" inoremap <expr> <CR> (pumvisible() ? "\<c-y>\<cr>" : "\<CR>")

" Snippet completion testing
" inoremap <expr> <CR> (pumvisible() ? "\<c-y>\<cr>" : "\<CR>")
inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
inoremap <silent> <expr> <CR> pumvisible() ? ncm2_ultisnips#expand_or("\<C-e>") : "\<CR>"

" Editor config
nnoremap <leader>ac :vsplit ~/.ansible.cfg<CR>
nnoremap <leader>ah :vsplit ~/.ansible/hosts<CR>
nnoremap <leader>ev :vsplit ~/.config/nvim/init.vim<CR>
nnoremap <leader>eg :vsplit ~/.gitconfig<CR>

" FZF
nnoremap <C-p> :Files<CR>

" LanguageClient ?
nnoremap [e :cprevious<CR>
nnoremap ]e :cnext<CR>

" NERDTree same as Atom - <Alt-\>
map « :NERDTreeToggle<CR>

" GitGutterToggle - <Alt-g>
map © :GitGutterToggle<CR>
nnoremap <leader>gb :Gblame<cr>
nnoremap <leader>gs :Gstatus<cr>
nnoremap <leader>gf :GFiles<cr>

"""""""""""""
" Functions "
"""""""""""""

" run :GoBuild or :GoTestCompile based on the go file
function! s:build_go_files()
  let l:file = expand('%')
  if l:file =~# '^\f\+_test\.go$'
    call go#test#Test(0, 1)
  elseif l:file =~# '^\f\+\.go$'
    call go#cmd#Build(0)
  endif
endfunction

" Consul Template
function! s:ConsulTemplate()
    set et ts=2 sw=2
    set makeprg=consul-template\ -dry\ -once\ -template\ %
    " setlocal errorformat=%.%#\ [%t%*[A-Z]]\ %.%#\ %f:\ %[a-z]:\ template:\ :%l:%c:\ %m
    setlocal errorformat=%.%#\ [%t%*[A-Z]]\ (%*[a-z])\ %f:\ %*[a-z]:\ %*[a-z]:\ :%l:%c:\ %m
    setlocal errorformat+=%.%#\ [%t%*[A-Z]]\ (%*[a-z])\ %f:\ %*[a-z]:\ %*[a-z]:\ :%l:\ %m
    " setlocal errorformat+=%.%#\ [%t%*[A-Z]]\ (cli)\ %m
    " setlocal errorformat+=%.%#\ [%t%*[A-Z]]\ (runner)\ %m
    " setlocal errorformat+=%.%#\ [%t%*[A-Z]]\ (view)\ %m
    " set errorformat+="%.%*\[%t%*] (cli)\ %f:\ %tarse:\ template:\ :%l:\ %m"
    " 2019/10/06 16:50:50.593703 [ERR] (cli) template.ctmpl: execute: template: :1:14: executing "" at <"">: undefined variable: $f
endfunction

" Go Development Mappings
function! GoMaps()
    echomsg "Loading mappgings for Golang Development!"
    nmap <leader>gg :<C-u>call <SID>build_go_files()<cr>
    nmap <leader>gb <Plug>(go-build)
    nmap <leader>gt <Plug>(go-test)
    nmap <leader>gr <Plug>(go-run)
endfunction

" LanguageClient
function! LC_maps()
    if has_key(g:LanguageClient_serverCommands, &filetype)
        nnoremap <F5> :call LanguageClient_contextMenu()<cr>
        nnoremap <buffer> <silent> K :call LanguageClient#textDocument_hover()<cr>
        nnoremap <buffer> <silent> gd :call LanguageClient#textDocument_definition()<cr>
        nnoremap <buffer> <silent> <F2> :call LanguageClient#textDocument_rename()<cr>
    endif
endfunction

function! s:RubyConfig()
    set et ts=2 sw=2
    set omnifunc=rubycomplete#Complete
    let g:rubycomplete_buffer_loading = 1
    let g:rubycomplete_classes_in_global = 1
    let g:rubycomplete_rails = 1
    compiler ruby
endfunction

function! s:terraformSetup()
    setlocal foldmarker={,}
    setlocal foldmethod=marker
    setlocal foldlevel=0
    setlocal foldlevelstart=0
    setlocal foldenable
endfunction

function! s:yamlSetup()
    setlocal foldmarker=s+[\"\]'a-z]*:,s+[\"\'a-z]*:
    setlocal foldmethod=indent
    setlocal foldlevel=0
    setlocal foldlevelstart=0
    setlocal foldenable
    setlocal cursorcolumn
    setlocal cursorline
endfunction

""""""""""""""""""""""""""""""
" Overrides / customisations "
""""""""""""""""""""""""""""""
" fzf's preview use of Ag: https://stackoverflow.com/a/50730458
command! -bang -nargs=* Ag
  \ call fzf#vim#ag(<q-args>,
  \                 <bang>0 ? fzf#vim#with_preview('up:60%')
  \                         : fzf#vim#with_preview(),
  \                 <bang>0)
